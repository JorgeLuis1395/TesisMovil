{"version":3,"sources":["webpack:///src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.ts","webpack:///src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.html","webpack:///src/app/main/apps/mail-ngrx/i18n/en.ts","webpack:///src/app/main/apps/mail-ngrx/i18n/tr.ts","webpack:///src/app/main/apps/mail-ngrx/mail-details/mail-details.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-details/mail-details.component.html","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.html","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list.component.html","webpack:///src/app/main/apps/mail-ngrx/mail.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail.component.html","webpack:///src/app/main/apps/mail-ngrx/mail.model.ts","webpack:///src/app/main/apps/mail-ngrx/mail.module.ts","webpack:///src/app/main/apps/mail-ngrx/mail.service.ts","webpack:///src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.ts","webpack:///src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.html","webpack:///src/app/main/apps/mail-ngrx/store/actions/filters.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/folders.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/labels.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/mails.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/filters.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/folders.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/labels.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/mails.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/guards/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/guards/resolve.guard.ts","webpack:///src/app/main/apps/mail-ngrx/store/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/filters.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/folders.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/labels.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/mails.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/filters.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/folders.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/labels.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/mails.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/store.module.ts"],"names":["MailNgrxComposeDialogComponent","matDialogRef","_data","_formBuilder","composeForm","createComposeForm","group","from","value","disabled","to","cc","bcc","subject","message","selector","templateUrl","styleUrls","encapsulation","None","locale","lang","data","MAIL","COMPOSE","FOLDERS","FILTERS","LABELS","NO_MESSAGES","SELECT_A_MESSAGE_TO_READ","SEARCH_PLACEHOLDER","$event","stopPropagation","MailNgrxDetailsComponent","_mailNgrxService","_store","labels$","pipe","showDetails","updateModel","currentMail","markAsRead","mail","read","markRead","updateMail","event","toggleStar","toggleImportant","dispatch","changeDetection","OnPush","MailNgrxListItemComponent","_changeDetectorRef","selectedMailIds$","selected","unread","subscribe","selectedMailIds","length","find","id","undefined","refresh","markForCheck","onSelectedChange","MailNgrxListComponent","_activatedRoute","_router","mailId","labelHandle","snapshot","params","filterHandle","folderHandle","navigate","MailNgrxComponent","_fuseSidebarService","_fuseTranslationLoaderService","searchInput","loadTranslations","currentMail$","mails$","folders$","searchText$","mails","hasSelectedMails","isIndeterminate","searchText","setValue","valueChanges","detach","ev","preventDefault","deselectAllMails","selectAllMails","parameter","labelId","folderId","name","getSidebar","toggleOpen","toggleSidebar","toggleSelectAll","selectMailsByParameter","Mail","time","starred","important","hasAttachments","attachments","labels","folder","routes","path","component","canActivate","redirectTo","MailNgrxModule","forChild","declarations","imports","providers","entryComponents","MailNgrxService","_httpClient","folders","foldersArr","filters","filtersArr","labelsArr","selectedMails","get","handle","label","post","MailNgrxMainSidebarComponent","_matDialog","accounts","creapond","withinpixels","selectedAccount","filters$","dialogRef","open","panelClass","afterClosed","response","actionType","formData","console","log","getRawValue","composeDialog","GET_FILTERS","GET_FILTERS_SUCCESS","GET_FILTERS_FAILED","GetFilters","payload","type","GetFiltersSuccess","GetFiltersFailed","GET_FOLDERS","GET_FOLDERS_SUCCESS","GET_FOLDERS_FAILED","GetFolders","GetFoldersSuccess","GetFoldersFailed","GET_LABELS","GET_LABELS_SUCCESS","GET_LABELS_FAILED","GetLabels","GetLabelsSuccess","GetLabelsFailed","GET_MAILS","GET_MAILS_SUCCESS","GET_MAILS_FAILED","SET_CURRENT_MAIL","SET_CURRENT_MAIL_SUCCESS","CHECK_CURRENT_MAIL","UPDATE_MAIL","UPDATE_MAIL_SUCCESS","UPDATE_MAILS","UPDATE_MAILS_SUCCESS","SET_SEARCH_TEXT","SELECT_ALL_MAILS","DESELECT_ALL_MAILS","TOGGLE_IN_SELECTED_MAILS","SELECT_MAILS_BY_PARAMETER","SET_FOLDER_ON_SELECTED_MAILS","ADD_LABEL_ON_SELECTED_MAILS","GetMails","GetMailsSuccess","GetMailsFailed","SetCurrentMail","SetCurrentMailSuccess","CheckCurrentMail","UpdateMail","UpdateMailSuccess","UpdateMails","UpdateMailsSuccess","SetSearchText","SelectAllMails","DeselectAllMails","ToggleInSelectedMails","SelectMailsByParameter","SetFolderOnSelectedMails","AddLabelOnSelectedMails","FiltersEffect","actions","mailService","getFilters","action","err","FoldersEffect","getFolders","effects","LabelsEffect","getLabels","MailsEffect","store","getMails","routeParams","param","routerState","loaded","updateMails","map","setCurrentMail","state","entities","checkCurrentMail","getMailsSuccess","updateMailsSuccess","updateMailSuccess","setFolderOnSelectedMails","mailsToUpdate","addLabelOnSelectedMails","includes","ResolveGuard","route","checkStore","foldersLoaded","filtersLoaded","labelsLoaded","FiltersInitialState","loading","FiltersReducer","reduce","_entities","filter","FoldersInitialState","FoldersReducer","getMailAppState","getAppState","reducers","LabelsInitialState","LabelsReducer","MailsInitialState","MailsReducer","arr","Object","keys","k","getFiltersState","getFiltersLoaded","getFiltersArr","getFoldersState","getFoldersLoaded","getFoldersArr","getLabelsState","getLabelsLoaded","getLabelsArr","getMailsState","getMailsLoaded","getSearchText","getMailsArr","filterArrayByString","getCurrentMail","getSelectedMailIds","MailNgrxStoreModule","forFeature"],"mappings":"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","file":"mail-ngrx-mail-module-es5.js","sourcesContent":["import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector     : 'mail-ngrx-compose',\n    templateUrl  : './compose.component.html',\n    styleUrls    : ['./compose.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MailNgrxComposeDialogComponent\n{\n    composeForm: FormGroup;\n\n    /**\n     * Constructor\n     *\n     * @param {MatDialogRef<MailNgrxComposeDialogComponent>} matDialogRef\n     * @param _data\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<MailNgrxComposeDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.composeForm = this.createComposeForm();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Create compose form\n     *\n     * @returns {FormGroup}\n     */\n    createComposeForm(): FormGroup\n    {\n        return this._formBuilder.group({\n            from   : {\n                value   : ['johndoe@creapond.com'],\n                disabled: [true]\n            },\n            to     : [''],\n            cc     : [''],\n            bcc    : [''],\n            subject: [''],\n            message: ['']\n        });\n\n    }\n\n}\n","<div class=\"dialog-content-wrapper\">\n    <mat-toolbar class=\"mat-accent m-0\">\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"title dialog-title\">New Message</span>\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\n\n        <form name=\"composeForm\" [formGroup]=\"composeForm\" class=\"compose-form\" fxLayout=\"column\" fxFlex>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>From</mat-label>\n                <input matInput name=\"from\"\n                       formControlName=\"from\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>To</mat-label>\n                <input matInput name=\"to\"\n                       formControlName=\"to\"\n                       type=\"email\" required>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Cc</mat-label>\n                <input matInput\n                       name=\"cc\"\n                       formControlName=\"cc\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Bcc</mat-label>\n                <input matInput\n                       name=\"bcc\"\n                       formControlName=\"bcc\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Subject</mat-label>\n                <input matInput name=\"subject\"\n                       formControlName=\"subject\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Message</mat-label>\n                <textarea matInput name=\"message\"\n                          formControlName=\"message\"\n                          rows=\"6\">\n                </textarea>\n            </mat-form-field>\n\n            <div class=\"attachment-list\">\n\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div>\n                        <span class=\"filename\">attachment-2.doc</span>\n                        <span class=\"size ml-4\">(12 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label=\"Delete attachment\">\n                        <mat-icon class=\"s-16\">close</mat-icon>\n                    </button>\n                </div>\n\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div>\n                        <span class=\"filename\">attachment-1.jpg</span>\n                        <span class=\"size ml-4\">(350 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label=\"Delete attachment\">\n                        <mat-icon class=\"s-16\">close</mat-icon>\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <div mat-dialog-actions class=\"m-0 p-16\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <div>\n            <button mat-raised-button\n                    color=\"accent\"\n                    (click)=\"matDialogRef.close(['send',composeForm])\"\n                    class=\"save-button\"\n                    [disabled]=\"composeForm.invalid\"\n                    aria-label=\"SAVE\">\n                SEND\n            </button>\n\n            <button mat-icon-button matTooltip=\"Attach a file\">\n                <mat-icon>attach_file</mat-icon>\n            </button>\n        </div>\n\n        <button mat-icon-button (click)=\"matDialogRef.close(['delete',composeForm])\" aria-label=\"Delete\"\n                matTooltip=\"Delete\">\n            <mat-icon>delete</mat-icon>\n        </button>\n    </div>\n</div>\n","export const locale = {\n    lang: 'en',\n    data: {\n        MAIL: {\n            COMPOSE                 : 'COMPOSE',\n            FOLDERS                 : 'FOLDERS',\n            FILTERS                 : 'FILTERS',\n            LABELS                  : 'LABELS',\n            NO_MESSAGES             : 'There are no messages!',\n            SELECT_A_MESSAGE_TO_READ: 'Select a message to read',\n            SEARCH_PLACEHOLDER: 'Search for an e-mail or contact'\n        }\n    }\n};\n","export const locale = {\n    lang: 'tr',\n    data: {\n        MAIL: {\n            COMPOSE                 : 'YENİ E-POSTA',\n            FOLDERS                 : 'KLASÖRLER',\n            FILTERS                 : 'FİLTRELER',\n            LABELS                  : 'ETİKETLER',\n            NO_MESSAGES             : 'Mesajiniz bulunmamakta!',\n            SELECT_A_MESSAGE_TO_READ: 'Okumak için bir mesaj seçin',\n            SEARCH_PLACEHOLDER      : 'E-mail yada bir kişi arayın'\n        }\n    }\n};\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-details',\n    templateUrl    : './mail-details.component.html',\n    styleUrls      : ['./mail-details.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxDetailsComponent implements OnChanges\n{\n    @Input()\n    currentMail: Mail;\n\n    labels$: Observable<any>;\n    mail: Mail;\n    showDetails: boolean;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.showDetails = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     */\n    ngOnChanges(): void\n    {\n        this.updateModel(this.currentMail);\n        this.markAsRead();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Mark as read\n     */\n    markAsRead(): void\n    {\n        if ( this.mail && !this.mail.read )\n        {\n            this.mail.markRead();\n            this.updateMail();\n        }\n    }\n\n    /**\n     * Toggle star\n     *\n     * @param event\n     */\n    toggleStar(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleStar();\n        this.updateMail();\n    }\n\n    /**\n     * Toggle important\n     *\n     * @param event\n     */\n    toggleImportant(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleImportant();\n        this.updateMail();\n    }\n\n    /**\n     * Update model\n     *\n     * @param data\n     */\n    updateModel(data): void\n    {\n        this.mail = !data ? null : new Mail({...data});\n    }\n\n    /**\n     * Update the mail\n     */\n    updateMail(): void\n    {\n        this._store.dispatch(new fromStore.UpdateMail(this.mail));\n        this.updateModel(this.mail);\n    }\n}\n","<div *ngIf=\"!mail\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex>\n    <mat-icon class=\"s-128 mb-16 select-message-icon hint-text\">\n        email\n    </mat-icon>\n    <span class=\"select-message-text hint-text\">\n        <span>{{ 'MAIL.SELECT_A_MESSAGE_TO_READ' | translate }}</span>\n    </span>\n</div>\n\n<div *ngIf=\"mail\">\n\n    <div class=\"mail-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n        <div>\n            <div class=\"subject\">{{mail.subject}}</div>\n\n            <div class=\"labels mt-8\" fxLayout=\"row wrap\">\n                <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\n                     fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <div class=\"label-color\" [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\n                    <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"actions\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <button mat-icon-button (click)=\"toggleStar($event)\" aria-label=\"Toggle star\">\n                <mat-icon class=\"amber-fg\" *ngIf=\"mail.starred\">star</mat-icon>\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.starred\">star_border</mat-icon>\n            </button>\n\n            <button mat-icon-button (click)=\"toggleImportant($event)\" aria-label=\"Toggle important\">\n                <mat-icon class=\"red-fg\" *ngIf=\"mail.important\">label</mat-icon>\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.important\">label_outline</mat-icon>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"mail-content\">\n\n        <div class=\"info\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n\n                    <div>\n                        <img *ngIf=\"mail.from.avatar\" alt=\"{{mail.from.name}}\"\n                             src=\"{{mail.from.avatar}}\" class=\"avatar\"/>\n\n                        <div *ngIf=\"!mail.from.avatar\" class=\"avatar\" ms-random-class=\"vm.colors\">\n                            {{mail.from.name[0]}}\n                        </div>\n                    </div>\n\n                    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                        <div class=\"name\">\n                            {{mail.from.name}}\n                        </div>\n\n                        <div class=\"to\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <div class=\"to-text\">to</div>\n                            <div>{{mail.to[0].name}}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <a class=\"toggle-details\" (click)=\"showDetails = !showDetails\">\n                    <span *ngIf=\"!showDetails\">Show Details</span>\n                    <span *ngIf=\"showDetails\">Hide Details</span>\n                </a>\n\n                <div *ngIf=\"showDetails\" class=\"details\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n\n                    <div fxLayout=\"column\">\n                        <span class=\"title\">From:</span>\n                        <span class=\"title\">To:</span>\n                        <span class=\"title\">Date:</span>\n                    </div>\n\n                    <div fxLayout=\"column\">\n                        <span class=\"detail\">{{mail.from.email}}</span>\n                        <span class=\"detail\">{{mail.to[0].email}}</span>\n                        <span class=\"detail\">{{mail.time}}</span>\n                    </div>\n                </div>\n            </div>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"moreMenu\" aria-label=\"More\" (click)=\"$event.stopPropagation()\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <mat-menu #moreMenu=\"matMenu\">\n                <button mat-menu-item aria-label=\"Reply\">\n                    <mat-icon>reply</mat-icon>\n                    <span>Reply</span>\n                </button>\n\n                <button mat-menu-item aria-label=\"Forward\">\n                    <mat-icon>forward</mat-icon>\n                    <span>Forward</span>\n                </button>\n\n                <button mat-menu-item aria-label=\"Print\">\n                    <mat-icon>print</mat-icon>\n                    <span>Print</span>\n                </button>\n            </mat-menu>\n        </div>\n\n        <div [innerHTML]=\"mail.message\"></div>\n\n    </div>\n\n    <div *ngIf=\"mail.attachments\" class=\"mail-attachments\">\n\n        <div class=\"title\">\n            <span>Attachments</span>\n            ({{mail.attachments.length}})\n        </div>\n\n        <div class=\"attachment-list\" fxLayout=\"row wrap\">\n\n            <div class=\"attachment\" fxLayout=\"column\"\n                 *ngFor=\"let attachment of mail.attachments\">\n\n                <img class=\"preview\" src=\"{{attachment.preview}}\">\n\n                <div fxLayout=\"column\">\n                    <a href=\"#\" onclick=\"event.preventDefault()\">View</a>\n                    <a href=\"#\" onclick=\"event.preventDefault()\">Download</a>\n                    <div class=\"size\">({{attachment.size}})</div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from '../../mail.service';\nimport { Mail } from '../../mail.model';\nimport * as fromStore from '../../store';\n\n@Component({\n    selector       : 'mail-ngrx-list-item',\n    templateUrl    : './mail-list-item.component.html',\n    styleUrls      : ['./mail-list-item.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListItemComponent implements OnInit\n{\n    @Input() mail: Mail;\n    @HostBinding('class.selected') selected: boolean;\n    @HostBinding('class.unread') unread: boolean;\n    labels$: Observable<any>;\n    selectedMailIds$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.selected = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    ngOnInit(): void\n    {\n        // Set the initial values\n        this.mail = new Mail(this.mail);\n        this.unread = !this.mail.read;\n\n        this.selectedMailIds$.subscribe((selectedMailIds) => {\n            this.selected = selectedMailIds.length > 0 && selectedMailIds.find(id => id === this.mail.id) !== undefined;\n            this.refresh();\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onSelectedChange(): void\n    {\n        this._store.dispatch(new fromStore.ToggleInSelectedMails(this.mail.id));\n    }\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n    <mat-checkbox [checked]=\"selected\" (change)=\"onSelectedChange()\"\n                  (click)=\"$event.stopPropagation();\">\n    </mat-checkbox>\n\n    <div class=\"info\" fxFlex FlexLayout=\"column\">\n\n        <div class=\"row-1\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div class=\"name\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\n                <img class=\"avatar\" *ngIf=\"mail.from?.avatar\" alt=\"{{mail.from?.name}}\" src=\"{{mail.from?.avatar}}\"/>\n                <div class=\"avatar accent\" *ngIf=\"!mail.from?.avatar\">{{mail.from?.name[0]}}</div>\n                <span class=\"text-truncate\" *ngIf=\"mail?.from\">{{mail.from?.name}}</span>\n                <mat-icon class=\"s-16 ml-8\" *ngIf=\"mail.hasAttachments\">attachment</mat-icon>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <div class=\"time\">{{mail.time}}</div>\n            </div>\n\n        </div>\n\n        <div class=\"row-2\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                <div class=\"subject text-truncate\">\n                    {{mail.subject}}\n                </div>\n\n                <div class=\"message text-truncate\" *ngIf=\"mail?.message\">\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? '...' : ''}}\n                </div>\n\n                <div class=\"labels\" fxLayout=\"row wrap\" fxHide fxShow.gt-sm>\n                    <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\n                         fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <div class=\"label-color\"\n                             [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\n                        <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-list',\n    templateUrl    : './mail-list.component.html',\n    styleUrls      : ['./mail-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListComponent\n{\n    @Input()\n    mails: Mail[];\n\n    @Input()\n    currentMail: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Router} _router\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _mailNgrxService: MailNgrxService,\n        private _router: Router\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Read mail\n     *\n     * @param mailId\n     */\n    readMail(mailId): void\n    {\n        const labelHandle  = this._activatedRoute.snapshot.params.labelHandle,\n              filterHandle = this._activatedRoute.snapshot.params.filterHandle,\n              folderHandle = this._activatedRoute.snapshot.params.folderHandle;\n\n        if ( labelHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/label/' + labelHandle + '/' + mailId]);\n        }\n        else if ( filterHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/filter/' + filterHandle + '/' + mailId]);\n        }\n        else\n        {\n            this._router.navigate(['apps/mail-ngrx/' + folderHandle + '/' + mailId]);\n        }\n    }\n}\n","<div *ngIf=\"mails.length === 0\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlexFill>\n    <span class=\"no-messages-text hint-text\">{{ 'MAIL.NO_MESSAGES' | translate }}</span>\n</div>\n\n<div class=\"mail-list\">\n    <mail-ngrx-list-item *ngFor=\"let mail of mails\" [mail]=\"mail\" (click)=\"readMail(mail.id)\"\n                    [ngClass]=\"{'current-mail':mail?.id == currentMail?.id}\">\n    </mail-ngrx-list-item>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\nimport { FuseTranslationLoaderService } from '@fuse/services/translation-loader.service';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\n\nimport { locale as english } from 'app/main/apps/mail-ngrx/i18n/en';\nimport { locale as turkish } from 'app/main/apps/mail-ngrx/i18n/tr';\n\n@Component({\n    selector       : 'mail-ngrx',\n    templateUrl    : './mail.component.html',\n    styleUrls      : ['./mail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxComponent implements OnInit, OnDestroy\n{\n    hasSelectedMails: boolean;\n    isIndeterminate: boolean;\n    searchInput: FormControl;\n    mails$: Observable<any>;\n    folders$: Observable<any>;\n    labels$: Observable<any>;\n    currentMail$: Observable<Mail>;\n    selectedMailIds$: Observable<string[]>;\n    searchText$: Observable<string>;\n    mails: Mail[];\n    selectedMailIds: string[];\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {FuseSidebarService} _fuseSidebarService\n     * @param {FuseTranslationLoaderService} _fuseTranslationLoaderService\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _fuseSidebarService: FuseSidebarService,\n        private _fuseTranslationLoaderService: FuseTranslationLoaderService,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.searchInput = new FormControl('');\n        this._fuseTranslationLoaderService.loadTranslations(english, turkish);\n        this.currentMail$ = this._store.pipe(select(fromStore.getCurrentMail));\n        this.mails$ = this._store.pipe(select(fromStore.getMailsArr));\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.searchText$ = this._store.pipe(select(fromStore.getSearchText));\n        this.mails = [];\n        this.selectedMailIds = [];\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.mails$.subscribe(mails => {\n            this.mails = mails;\n        });\n\n        this.selectedMailIds$\n            .subscribe(selectedMailIds => {\n                this.selectedMailIds = selectedMailIds;\n                this.hasSelectedMails = selectedMailIds.length > 0;\n                this.isIndeterminate = (selectedMailIds.length !== this.mails.length && selectedMailIds.length > 0);\n                this.refresh();\n            });\n\n        this.searchText$.subscribe(searchText => {\n            this.searchInput.setValue(searchText);\n        });\n\n        this.searchInput.valueChanges.pipe(\n            debounceTime(300),\n            distinctUntilChanged()\n        ).subscribe(searchText => {\n            this._store.dispatch(new fromStore.SetSearchText(searchText));\n        });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        this._changeDetectorRef.detach();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle select all\n     *\n     * @param ev\n     */\n    toggleSelectAll(ev): void\n    {\n        ev.preventDefault();\n\n        if ( this.selectedMailIds.length && this.selectedMailIds.length > 0 )\n        {\n            this.deselectAllMails();\n        }\n        else\n        {\n            this.selectAllMails();\n        }\n    }\n\n    /**\n     * Select all mails\n     */\n    selectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.SelectAllMails());\n    }\n\n    /**\n     * Deselect all mails\n     */\n    deselectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.DeselectAllMails());\n    }\n\n    /**\n     * Select mails by parameter\n     *\n     * @param parameter\n     * @param value\n     */\n    selectMailsByParameter(parameter, value): void\n    {\n        this._store.dispatch(new fromStore.SelectMailsByParameter({\n            parameter,\n            value\n        }));\n    }\n\n    /**\n     * Toggle label on selected mails\n     *\n     * @param labelId\n     */\n    toggleLabelOnSelectedMails(labelId): void\n    {\n        this._store.dispatch(new fromStore.AddLabelOnSelectedMails(labelId));\n    }\n\n    /**\n     * Set folder on selected mails\n     *\n     * @param folderId\n     */\n    setFolderOnSelectedMails(folderId): void\n    {\n        this._store.dispatch(new fromStore.SetFolderOnSelectedMails(folderId));\n    }\n\n    /**\n     * Deselect current mail\n     */\n    deselectCurrentMail(): void\n    {\n        this._store.dispatch(new fromStore.SetCurrentMail(''));\n    }\n\n    /**\n     * Refresh\n     */\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle the sidebar\n     *\n     * @param name\n     */\n    toggleSidebar(name): void\n    {\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\n    }\n}\n","<div id=\"mail\" class=\"page-layout carded left-sidebar inner-scroll\">\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- SIDEBAR -->\n    <fuse-sidebar class=\"sidebar\" name=\"mail-ngrx-main-sidebar\" position=\"left\" lockedOpen=\"gt-md\">\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\n    </fuse-sidebar>\n    <!-- / SIDEBAR -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- CONTENT HEADER -->\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div class=\"search-wrapper\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <button mat-icon-button class=\"sidebar-toggle\" fxHide.gt-md\n                        (click)=\"toggleSidebar('mail-ngrx-main-sidebar')\">\n                    <mat-icon>menu</mat-icon>\n                </button>\n\n                <div class=\"search\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\n                    <input [formControl]=\"searchInput\" [placeholder]=\"'MAIL.SEARCH_PLACEHOLDER' | translate\" fxFlex>\n                </div>\n            </div>\n        </div>\n        <!-- / CONTENT HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card\" [ngClass]=\"{'current-mail-selected':currentMail$ | async}\">\n\n            <!-- CONTENT TOOLBAR -->\n            <div class=\"toolbar px-24 py-8\">\n\n                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\n\n                    <mat-checkbox (click)=\"toggleSelectAll($event)\"\n                                  [checked]=\"hasSelectedMails\"\n                                  [indeterminate]=\"isIndeterminate\">\n                    </mat-checkbox>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"selectMenu\">\n                        <mat-icon>arrow_drop_down</mat-icon>\n                    </button>\n                    <mat-menu #selectMenu=\"matMenu\">\n                        <button mat-menu-item (click)=\"selectAllMails()\">All</button>\n                        <button mat-menu-item (click)=\"deselectAllMails()\">None</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', true)\">Read</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', false)\">Unread</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', true)\">Starred</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', false)\">Unstarred</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', true)\">Important</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', false)\">Unimportant</button>\n                    </mat-menu>\n\n                    <div class=\"toolbar-separator\" *ngIf=\"hasSelectedMails\"></div>\n\n                    <button mat-icon-button (click)=\"setFolderOnSelectedMails(4)\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">delete</mat-icon>\n                    </button>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"folderMenu\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">folder</mat-icon>\n                    </button>\n                    <mat-menu #folderMenu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let folder of folders$ | async\"\n                                (click)=\"setFolderOnSelectedMails(folder.id)\">{{folder.title}}\n                        </button>\n                    </mat-menu>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelMenu\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">label</mat-icon>\n                    </button>\n                    <mat-menu #labelMenu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let label of labels$ | async\"\n                                (click)=\"toggleLabelOnSelectedMails(label.id)\">{{label.title}}\n                        </button>\n                    </mat-menu>\n                </div>\n\n                <div *ngIf=\"currentMail$ | async\" fxHide.gt-xs>\n                    <button mat-icon-button (click)=\"deselectCurrentMail()\">\n                        <mat-icon class=\"secondary-text\">arrow_back</mat-icon>\n                    </button>\n                </div>\n            </div>\n            <!-- / CONTENT TOOLBAR -->\n\n            <!-- CONTENT -->\n            <div class=\"content\" fxLayout=\"row\">\n\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]=\"mails$ | async\" [currentMail]=\"currentMail$ | async\"></mail-ngrx-list>\n                <mail-ngrx-details [currentMail]=\"currentMail$ | async\" fusePerfectScrollbar fxFlex></mail-ngrx-details>\n\n            </div>\n            <!-- / CONTENT -->\n\n        </div>\n        <!-- / CONTENT CARD -->\n\n    </div>\n    <!-- / CENTER -->\n\n</div>\n","export class Mail\n{\n    id: string;\n    from: {\n        name: string,\n        avatar: string,\n        email: string\n    };\n    to: {\n        name: string,\n        email: string\n    }[];\n    subject: string;\n    message: string;\n    time: string;\n    read: boolean;\n    starred: boolean;\n    important: boolean;\n    hasAttachments: boolean;\n    attachments: {\n        type: string,\n        fileName: string,\n        preview: string,\n        url: string,\n        size: string\n    }[];\n    labels: string[];\n    folder: string;\n\n    /**\n     * Constructor\n     *\n     * @param mail\n     */\n    constructor(mail)\n    {\n        this.id = mail.id;\n        this.from = mail.from;\n        this.to = mail.to;\n        this.subject = mail.subject;\n        this.message = mail.message;\n        this.time = mail.time;\n        this.read = mail.read;\n        this.starred = mail.starred;\n        this.important = mail.important;\n        this.hasAttachments = mail.hasAttachments;\n        this.attachments = mail.attachments;\n        this.labels = mail.labels;\n        this.folder = mail.folder;\n    }\n\n    /**\n     * Toggle star\n     */\n    toggleStar(): void\n    {\n        this.starred = !this.starred;\n    }\n\n    /**\n     * Toggle important\n     */\n    toggleImportant(): void\n    {\n        this.important = !this.important;\n    }\n\n    /**\n     * Mark as read\n     */\n    markRead(): void\n    {\n        this.read = true;\n    }\n\n    /**\n     * Mark as unread\n     */\n    markUnread(): void\n    {\n        this.read = false;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FuseSidebarModule } from '@fuse/components';\n\nimport * as fromGuards from 'app/main/apps/mail-ngrx/store/guards/index';\nimport { MailNgrxStoreModule } from 'app/main/apps/mail-ngrx/store/store.module';\nimport { MailNgrxComponent } from 'app/main/apps/mail-ngrx/mail.component';\nimport { MailNgrxListComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list.component';\nimport { MailNgrxListItemComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component';\nimport { MailNgrxDetailsComponent } from 'app/main/apps/mail-ngrx/mail-details/mail-details.component';\nimport { MailNgrxMainSidebarComponent } from 'app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\nconst routes: Routes = [\n    {\n        path       : 'label/:labelHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'label/:labelHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path      : '**',\n        redirectTo: 'inbox'\n    }\n];\n\n@NgModule({\n    declarations   : [\n        MailNgrxComponent,\n        MailNgrxListComponent,\n        MailNgrxListItemComponent,\n        MailNgrxDetailsComponent,\n        MailNgrxMainSidebarComponent,\n        MailNgrxComposeDialogComponent\n    ],\n    imports        : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatToolbarModule,\n\n        TranslateModule,\n\n        FuseSharedModule,\n        FuseSidebarModule,\n\n        MailNgrxStoreModule\n    ],\n    providers      : [\n        MailNgrxService,\n        fromGuards.ResolveGuard\n    ],\n    entryComponents: [MailNgrxComposeDialogComponent]\n})\nexport class MailNgrxModule\n{\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { getFiltersArr, getFoldersArr, getLabelsArr, getMailsArr } from 'app/main/apps/mail-ngrx/store/selectors';\n\n@Injectable()\nexport class MailNgrxService\n{\n    foldersArr: any;\n    filtersArr: any;\n    labelsArr: any;\n    selectedMails: Mail[];\n    mails: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _httpClient: HttpClient,\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getFoldersArr))\n            .subscribe(folders => {\n                this.foldersArr = folders;\n            });\n\n        this._store\n            .pipe(select(getFiltersArr))\n            .subscribe(filters => {\n                this.filtersArr = filters;\n            });\n\n        this._store\n            .pipe(select(getLabelsArr))\n            .subscribe(labels => {\n                this.labelsArr = labels;\n            });\n\n        this._store\n            .pipe(select(getMailsArr))\n            .subscribe(mails => {\n                this.mails = mails;\n            });\n\n        this.selectedMails = [];\n    }\n\n    /**\n     * Get all mails\n     *\n     * @returns {Observable<Mail[]>}\n     */\n    getAllMails(): Observable<Mail[]>\n    {\n        return this._httpClient.get<Mail[]>('api/mail-mails');\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-folders');\n    }\n\n    /**\n     * Get filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-filters');\n    }\n\n    /**\n     * Get labels\n     *\n     * @returns {Observable<any>}\n     */\n    getLabels(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-labels');\n    }\n\n    /**\n     * Get mails\n     *\n     * @param handle\n     * @returns {Observable<Mail[]>}\n     */\n    getMails(handle): Observable<Mail[]>\n    {\n        if ( handle.id === 'labelHandle' )\n        {\n            const labelId = this.labelsArr.find(label => label.handle === handle.value).id;\n            return this._httpClient.get<Mail[]>('api/mail-mails?labels=' + labelId);\n        }\n        else if ( handle.id === 'filterHandle' )\n        {\n            return this._httpClient.get<Mail[]>('api/mail-mails?' + handle.value + '=true');\n        }\n        else // folderHandle\n        {\n            const folderId = this.foldersArr.find(folder => folder.handle === handle.value).id;\n            return this._httpClient.get<any>('api/mail-mails?folder=' + folderId);\n        }\n    }\n\n    /**\n     * Update the mail\n     *\n     * @param mail\n     * @returns {Promise<any>}\n     */\n    updateMail(mail): any\n    {\n        return this._httpClient.post('api/mail-mails/' + mail.id, {...mail});\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\n\n@Component({\n    selector       : 'mail-ngrx-main-sidebar',\n    templateUrl    : './main-sidebar.component.html',\n    styleUrls      : ['./main-sidebar.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxMainSidebarComponent\n{\n    labels: any[];\n    accounts: object;\n    selectedAccount: string;\n    dialogRef: any;\n\n    folders$: Observable<any>;\n    filters$: Observable<any>;\n    labels$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {MatDialog} _matDialog\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _matDialog: MatDialog,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.accounts = {\n            creapond    : 'johndoe@creapond.com',\n            withinpixels: 'johndoe@withinpixels.com'\n        };\n        this.selectedAccount = 'creapond';\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.filters$ = this._store.pipe(select(fromStore.getFiltersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Compose dialog\n     */\n    composeDialog(): void\n    {\n        this.dialogRef = this._matDialog.open(MailNgrxComposeDialogComponent, {\n            panelClass: 'mail-ngrx-compose-dialog'\n        });\n\n        this.dialogRef.afterClosed()\n            .subscribe(response => {\n                if ( !response )\n                {\n                    return;\n                }\n                const actionType: string = response[0];\n                const formData: FormGroup = response[1];\n                switch ( actionType )\n                {\n                    /**\n                     * Send\n                     */\n                    case 'send':\n                        console.log('new Mail', formData.getRawValue());\n                        break;\n                    /**\n                     * Delete\n                     */\n                    case 'delete':\n                        console.log('delete Mail');\n                        break;\n                }\n            });\n    }\n}\n","<!-- SIDEBAR HEADER -->\n<div fxLayout=\"column\" fxLayoutAlign=\"space-between start\"\n     class=\"header accent p-24 pb-4\">\n\n    <div class=\"logo\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <mat-icon class=\"logo-icon s-32\">mail</mat-icon>\n        <span class=\"logo-text\">MailboxNgrx</span>\n    </div>\n\n    <div class=\"account\" fxLayout=\"column\">\n        <div class=\"title\">John Doe</div>\n        <mat-form-field floatLabel=\"never\">\n            <mat-select class=\"account-selection\" placeholder=\"Mail Selection\"\n                        [ngModel]=\"selectedAccount\">\n                <mat-option *ngFor=\"let account of (accounts | keys)\" [value]=\"account.key\">\n                    {{account.value}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n</div>\n<!-- / SIDEBAR HEADER -->\n\n<!-- SIDEBAR CONTENT -->\n<div class=\"content\" fusePerfectScrollbar>\n\n    <div class=\"px-24 pt-32 pb-12\">\n        <button mat-raised-button\n                class=\"mat-accent compose-dialog-button w-100-p\"\n                (click)=\"composeDialog()\"\n                aria-label=\"Compose\">\n            {{ 'MAIL.COMPOSE' | translate }}\n        </button>\n    </div>\n\n    <div class=\"nav material2\">\n\n        <div class=\"nav-subheader\">{{ 'MAIL.FOLDERS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let folder of (folders$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/' + folder.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" *ngIf=\"folder.icon\">{{folder.icon}}</mat-icon>\n                <span>{{folder.title}}</span>\n            </a>\n        </div>\n\n        <div class=\"nav-subheader\">{{ 'MAIL.FILTERS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let filter of (filters$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/filter/' + filter.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" [ngClass]=\"filter.color\" *ngIf=\"filter.icon\">{{filter.icon}}</mat-icon>\n                <span>{{filter.title}}</span>\n            </a>\n        </div>\n\n        <div class=\"nav-subheader\">{{ 'MAIL.LABELS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let label of (labels$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/label/' + label.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" [ngStyle]=\"{'color':label.color}\">label</mat-icon>\n                <span>{{label.title}}</span>\n            </a>\n        </div>\n\n    </div>\n\n</div>\n<!-- / SIDEBAR CONTENT -->\n","import { Action } from '@ngrx/store';\n\nexport const GET_FILTERS = '[FILTERS] GET FILTERS';\nexport const GET_FILTERS_SUCCESS = '[FILTERS] GET FILTERS SUCCESS';\nexport const GET_FILTERS_FAILED = '[FILTERS] GET FILTERS FAILED';\n\n/**\n * Get Filters\n */\nexport class GetFilters implements Action\n{\n    readonly type = GET_FILTERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Success\n */\nexport class GetFiltersSuccess implements Action\n{\n    readonly type = GET_FILTERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Failed\n */\nexport class GetFiltersFailed implements Action\n{\n    readonly type = GET_FILTERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FiltersActionsAll\n    = GetFilters\n    | GetFiltersSuccess\n    | GetFiltersFailed;\n","import { Action } from '@ngrx/store';\n\nexport const GET_FOLDERS = '[FOLDERS] GET FOLDERS';\nexport const GET_FOLDERS_SUCCESS = '[FOLDERS] GET FOLDERS SUCCESS';\nexport const GET_FOLDERS_FAILED = '[FOLDERS] GET FOLDERS FAILED';\n\n/**\n * Get Folders\n */\nexport class GetFolders implements Action\n{\n    readonly type = GET_FOLDERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Success\n */\nexport class GetFoldersSuccess implements Action\n{\n    readonly type = GET_FOLDERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Failed\n */\nexport class GetFoldersFailed implements Action\n{\n    readonly type = GET_FOLDERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FoldersActionsAll\n    = GetFolders\n    | GetFoldersSuccess\n    | GetFoldersFailed;\n","export * from './mails.actions';\nexport * from './folders.actions';\nexport * from './filters.actions';\nexport * from './labels.actions';\n","import { Action } from '@ngrx/store';\n\nexport const GET_LABELS = '[LABELS] GET LABELS';\nexport const GET_LABELS_SUCCESS = '[LABELS] GET LABELS SUCCESS';\nexport const GET_LABELS_FAILED = '[LABELS] GET LABELS FAILED';\n\n/**\n * Get Labels\n */\nexport class GetLabels implements Action\n{\n    readonly type = GET_LABELS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Success\n */\nexport class GetLabelsSuccess implements Action\n{\n    readonly type = GET_LABELS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Failed\n */\nexport class GetLabelsFailed implements Action\n{\n    readonly type = GET_LABELS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type LabelsActionsAll\n    = GetLabels\n    | GetLabelsSuccess\n    | GetLabelsFailed;\n","import { Action } from '@ngrx/store';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport const GET_MAILS = '[MAILS] GET MAILS';\nexport const GET_MAILS_SUCCESS = '[MAILS] GET MAILS SUCCESS';\nexport const GET_MAILS_FAILED = '[MAILS] GET MAILS FAILED';\nexport const SET_CURRENT_MAIL = '[MAILS] SET CURRENT MAIL';\nexport const SET_CURRENT_MAIL_SUCCESS = '[MAILS] SET CURRENT MAIL SUCCESS';\nexport const CHECK_CURRENT_MAIL = '[MAILS] CHECK CURRENT MAIL';\nexport const UPDATE_MAIL = '[MAILS] UPDATE MAIL';\nexport const UPDATE_MAIL_SUCCESS = '[MAILS] UPDATE MAIL SUCCESS';\nexport const UPDATE_MAILS = '[MAILS] UPDATE MAILS';\nexport const UPDATE_MAILS_SUCCESS = '[MAILS] UPDATE MAILS SUCCESS';\nexport const SET_SEARCH_TEXT = '[MAILS] SET SEARCH TEXT';\nexport const SELECT_ALL_MAILS = '[MAILS] SELECT ALL MAILS';\nexport const DESELECT_ALL_MAILS = '[MAILS] DESELECT ALL MAILS';\nexport const TOGGLE_IN_SELECTED_MAILS = '[MAILS] TOGGLE IN SELECTED MAILS';\nexport const SELECT_MAILS_BY_PARAMETER = '[MAILS] SELECT MAILS BY PARAMETER';\nexport const SET_FOLDER_ON_SELECTED_MAILS = '[MAILS] SET FOLDER ON SELECTED MAILS';\nexport const ADD_LABEL_ON_SELECTED_MAILS = '[MAILS] ADD LABEL ON SELECTED MAILS';\n\n/**\n * Get Mails\n */\nexport class GetMails implements Action\n{\n    readonly type = GET_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Get Mails Success\n */\nexport class GetMailsSuccess implements Action\n{\n    readonly type = GET_MAILS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Mails Failed\n */\nexport class GetMailsFailed implements Action\n{\n    readonly type = GET_MAILS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail\n */\nexport class SetCurrentMail implements Action\n{\n    readonly type = SET_CURRENT_MAIL;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail Success\n */\nexport class SetCurrentMailSuccess implements Action\n{\n    readonly type = SET_CURRENT_MAIL_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Check Current Mail\n */\nexport class CheckCurrentMail implements Action\n{\n    readonly type = CHECK_CURRENT_MAIL;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Update Mail\n */\nexport class UpdateMail implements Action\n{\n    readonly type = UPDATE_MAIL;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Update Mail Success\n */\nexport class UpdateMailSuccess implements Action\n{\n    readonly type = UPDATE_MAIL_SUCCESS;\n\n    constructor(public payload: Mail)\n    {\n    }\n}\n\n/**\n * Update Mails\n */\nexport class UpdateMails implements Action\n{\n    readonly type = UPDATE_MAILS;\n\n    constructor(public payload: Mail[])\n    {\n    }\n}\n\n/**\n * Update Mails Success\n */\nexport class UpdateMailsSuccess implements Action\n{\n    readonly type = UPDATE_MAILS_SUCCESS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Set Search Text\n */\nexport class SetSearchText implements Action\n{\n    readonly type = SET_SEARCH_TEXT;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select All Mails\n */\nexport class SelectAllMails implements Action\n{\n    readonly type = SELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Deselect All Mails\n */\nexport class DeselectAllMails implements Action\n{\n    readonly type = DESELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Toggle In Selected Mails\n */\nexport class ToggleInSelectedMails implements Action\n{\n    readonly type = TOGGLE_IN_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select Mails by Parameter\n */\nexport class SelectMailsByParameter implements Action\n{\n    readonly type = SELECT_MAILS_BY_PARAMETER;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Set Folder on Selected Mails\n */\nexport class SetFolderOnSelectedMails implements Action\n{\n    readonly type = SET_FOLDER_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Add label on Selected Mails\n */\nexport class AddLabelOnSelectedMails implements Action\n{\n    readonly type = ADD_LABEL_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type MailsActionsAll\n    = GetMails\n    | GetMailsSuccess\n    | GetMailsFailed\n    | SetCurrentMail\n    | SetCurrentMailSuccess\n    | CheckCurrentMail\n    | UpdateMail\n    | UpdateMailSuccess\n    | UpdateMails\n    | UpdateMailsSuccess\n    | SetSearchText\n    | SelectAllMails\n    | DeselectAllMails\n    | ToggleInSelectedMails\n    | SelectMailsByParameter\n    | SetFolderOnSelectedMails\n    | AddLabelOnSelectedMails;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FiltersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get filters from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFilters: Observable<FiltersActions.FiltersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FiltersActions.GetFilters>(FiltersActions.GET_FILTERS),\n                switchMap((action) => {\n                        return this.mailService.getFilters()\n                                   .pipe(\n                                       map((filters: any) => {\n                                           return new FiltersActions.GetFiltersSuccess(filters);\n                                       }),\n                                       catchError(err => of(new FiltersActions.GetFiltersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FoldersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Folders from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFolders: Observable<FoldersActions.FoldersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FoldersActions.GetFolders>(FoldersActions.GET_FOLDERS),\n                switchMap((action) => {\n                        return this.mailService.getFolders()\n                                   .pipe(\n                                       map((folders: any) => {\n                                           return new FoldersActions.GetFoldersSuccess(folders);\n                                       }),\n                                       catchError(err => of(new FoldersActions.GetFoldersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { MailsEffect } from './mails.effects';\nimport { FoldersEffect } from './folders.effects';\nimport { FiltersEffect } from './filters.effects';\nimport { LabelsEffect } from './labels.effects';\n\nexport const effects = [\n    MailsEffect,\n    FoldersEffect,\n    FiltersEffect,\n    LabelsEffect\n];\n\nexport * from './mails.effects';\nexport * from './folders.effects';\nexport * from './filters.effects';\nexport * from './labels.effects';\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as LabelsActions from '../actions/labels.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class LabelsEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Labels from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getLabels: Observable<LabelsActions.LabelsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<LabelsActions.GetLabels>(LabelsActions.GET_LABELS),\n                switchMap((action) => {\n                        return this.mailService.getLabels()\n                                   .pipe(\n                                       map((labels: any) => {\n                                           return new LabelsActions.GetLabelsSuccess(labels);\n                                       }),\n                                       catchError(err => of(new LabelsActions.GetLabelsFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { catchError, debounceTime, map, mergeMap, exhaustMap, withLatestFrom } from 'rxjs/operators';\n\nimport { getRouterState, State } from 'app/store/reducers';\nimport { getMailsState } from 'app/main/apps/mail-ngrx/store/selectors';\nimport * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport * as fromRoot from 'app/store';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class MailsEffect\n{\n    routerState: any;\n\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService,\n        private store: Store<State>\n    )\n    {\n        this.store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Get Mails with router parameters\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMails>(MailsActions.GET_MAILS),\n                exhaustMap((action) => {\n\n                    let handle = {\n                        id   : '',\n                        value: ''\n                    };\n\n                    const routeParams = of('labelHandle', 'filterHandle', 'folderHandle');\n                    routeParams.subscribe(param => {\n                        if ( this.routerState.params[param] )\n                        {\n                            handle = {\n                                id   : param,\n                                value: this.routerState.params[param]\n                            };\n                        }\n                    });\n\n                    return this.mailService.getMails(handle)\n                               .pipe(\n                                   map((mails: Mail[]) => {\n\n                                       return new MailsActions.GetMailsSuccess({\n                                           loaded: handle,\n                                           mails : mails\n                                       });\n                                   }),\n                                   catchError(err => of(new MailsActions.GetMailsFailed(err)))\n                               );\n                })\n            );\n\n    /**\n     * Update Mail\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMail: Observable<{}> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMail>(MailsActions.UPDATE_MAIL),\n                exhaustMap((action) => {\n                    return this.mailService.updateMail(action.payload).pipe(\n                        map(() => {\n                            return new MailsActions.UpdateMailSuccess(action.payload);\n                        })\n                    );\n                })\n            );\n\n    /**\n     * UpdateMails\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMails>(MailsActions.UPDATE_MAILS),\n                exhaustMap((action) => {\n                    return forkJoin(action.payload.map(mail => this.mailService.updateMail(mail))).pipe(map(() => {\n                        return new MailsActions.UpdateMailsSuccess();\n                    }));\n                })\n            );\n\n    /**\n     * Set Current Mail\n     * @type {Observable<SetCurrentMailSuccess>}\n     */\n    @Effect()\n    setCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetCurrentMail>(MailsActions.SET_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[action.payload]);\n                })\n            );\n\n    /**\n     * Check Current Mail\n     * Navigate to parent directory if not exist in mail list\n     * Update Current Mail if exist in mail list\n     * @type {Observable<any>}\n     */\n    @Effect()\n    checkCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.CheckCurrentMail>(MailsActions.CHECK_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    if ( this.routerState.params.mailId && !state.entities[this.routerState.params.mailId] )\n                    {\n                        // return new fromRoot.Go({path: [this.routerState.url.replace(this.routerState.params.mailId, '')]});\n                    }\n\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[this.routerState.params.mailId]);\n                })\n            );\n\n    /**\n     * On Get Mails Success\n     * @type {Observable<CheckCurrentMail>}\n     */\n    @Effect()\n    getMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMailsSuccess>(MailsActions.GET_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.CheckCurrentMail()\n                    ])\n            );\n    /**\n     * On Update Mails Success\n     * @type {Observable<DeselectAllMails | GetMails>}\n     */\n    @Effect()\n    updateMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailsSuccess>(MailsActions.UPDATE_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.DeselectAllMails(),\n                        new MailsActions.GetMails()\n                    ])\n            );\n    /**\n     * On Update Mail Success\n     * @type {Observable<GetMails>}\n     */\n    @Effect()\n    updateMailSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailSuccess>(MailsActions.UPDATE_MAIL_SUCCESS),\n                debounceTime(500),\n                map(() => {\n                    return new MailsActions.GetMails();\n                })\n            );\n\n    /**\n     * Set Folder on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    setFolderOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetFolderOnSelectedMails>(MailsActions.SET_FOLDER_ON_SELECTED_MAILS),\n                withLatestFrom(\n                    this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n                    state.selectedMailIds\n                         .map(id => {\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     folder: action.payload\n                                 }\n                             ];\n                         });\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n\n    /**\n     * Add Label on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    addLabelOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.AddLabelOnSelectedMails>(MailsActions.ADD_LABEL_ON_SELECTED_MAILS),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n\n                    state.selectedMailIds\n                         .map(id => {\n\n                             let labels = [...entities[id].labels];\n\n                             if ( !entities[id].labels.includes(action.payload) )\n                             {\n                                 labels = [...labels, action.payload];\n                             }\n\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     labels\n                                 }\n                             ];\n                         });\n\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n}\n","export * from './resolve.guard';\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { RouterStateSnapshot } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\n\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, switchMap, catchError, tap, take, filter } from 'rxjs/operators';\n\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { getFiltersLoaded, getFoldersLoaded, getLabelsLoaded, getMailsLoaded } from 'app/main/apps/mail-ngrx/store/selectors';\nimport { getRouterState } from 'app/store/reducers';\n\n@Injectable()\nexport class ResolveGuard implements CanActivate\n{\n    routerState: any;\n\n    /**\n     * Constructor\n     *\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Can activate\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<boolean>}\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>\n    {\n        return this.checkStore().pipe(\n            switchMap(() => of(true)),\n            catchError(() => of(false))\n        );\n    }\n\n    /**\n     * Check store\n     *\n     * @returns {Observable<any>}\n     */\n    checkStore(): Observable<any>\n    {\n        return forkJoin(\n            this.getFolders(),\n            this.getFilters(),\n            this.getLabels()\n        ).pipe(\n            filter(([foldersLoaded, filtersLoaded, labelsLoaded]) => !!(foldersLoaded && filtersLoaded && labelsLoaded)),\n            take(1),\n            switchMap(() =>\n                this.getMails()\n            ),\n            take(1),\n            map(() => this._store.dispatch(new fromStore.SetCurrentMail(this.routerState.params.mailId)))\n        );\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): any\n    {\n        return this._store.pipe(\n            select(getFoldersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFolders([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): any\n    {\n        return this._store.pipe(\n            select(getFiltersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFilters([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Labels\n     * @returns {Observable<any>}\n     */\n    getLabels(): any\n    {\n        return this._store.pipe(\n            select(getLabelsLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetLabels([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Mails\n     *\n     * @returns {Observable<any>}\n     */\n    getMails(): any\n    {\n        return this._store.pipe(\n            select(getMailsLoaded),\n            tap((loaded: any) => {\n\n                if ( !this.routerState.params[loaded.id] || this.routerState.params[loaded.id] !== loaded.value )\n                {\n                    this._store.dispatch(new fromStore.GetMails());\n                    this._store.dispatch(new fromStore.SetSearchText(''));\n                    this._store.dispatch(new fromStore.DeselectAllMails());\n                }\n            }),\n            filter((loaded: any) => {\n                return this.routerState.params[loaded.id] && this.routerState.params[loaded.id] === loaded.value;\n            }),\n            take(1)\n        );\n    }\n}\n","export * from './actions';\nexport * from './reducers';\nexport * from './selectors';\nexport * from './effects';\n","import * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\n\nexport interface FiltersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FiltersInitialState: FiltersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FiltersReducer(state = FiltersInitialState, action: FiltersActions.FiltersActionsAll): FiltersState\n{\n    switch ( action.type )\n    {\n        case FiltersActions.GET_FILTERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FiltersActions.GET_FILTERS_SUCCESS:\n\n            const filters = action.payload;\n            const entities = filters.reduce(\n                (_entities: { [id: number]: any }, filter: any) => {\n                    return {\n                        ..._entities,\n                        [filter.id]: filter\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FiltersActions.GET_FILTERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\n\nexport interface FoldersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FoldersInitialState: FoldersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FoldersReducer(state = FoldersInitialState, action: FoldersActions.FoldersActionsAll): FoldersState\n{\n    switch ( action.type )\n    {\n        case FoldersActions.GET_FOLDERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FoldersActions.GET_FOLDERS_SUCCESS:\n\n            const folders = action.payload;\n            const entities = folders.reduce(\n                (_entities: { [id: number]: any }, folder: any) => {\n                    return {\n                        ..._entities,\n                        [folder.id]: folder\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FoldersActions.GET_FOLDERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { MailsReducer, MailsState } from './mails.reducer';\nimport { FoldersReducer, FoldersState } from './folders.reducer';\nimport { FiltersReducer, FiltersState } from './filters.reducer';\nimport { LabelsReducer, LabelsState } from './labels.reducer';\n\nexport interface MailAppState\n{\n    mails: MailsState;\n    folders: FoldersState;\n    filters: FiltersState;\n    labels: LabelsState;\n}\n\nexport const getMailAppState = createFeatureSelector<MailAppState>(\n    'mail-app'\n);\n\nexport const getAppState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state\n);\n\nexport const reducers: ActionReducerMap<MailAppState> = {\n    mails  : MailsReducer,\n    folders: FoldersReducer,\n    filters: FiltersReducer,\n    labels : LabelsReducer\n};\n\nexport * from './mails.reducer';\nexport * from './folders.reducer';\nexport * from './filters.reducer';\nexport * from './labels.reducer';\n","import * as LabelsActions from 'app/main/apps/mail-ngrx/store/actions/labels.actions';\n\nexport interface LabelsState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const LabelsInitialState: LabelsState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function LabelsReducer(state = LabelsInitialState, action: LabelsActions.LabelsActionsAll): LabelsState\n{\n    switch ( action.type )\n    {\n        case LabelsActions.GET_LABELS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case LabelsActions.GET_LABELS_SUCCESS:\n\n            const labels = action.payload;\n            const entities = labels.reduce(\n                (_entities: { [id: number]: any }, label: any) => {\n                    return {\n                        ..._entities,\n                        [label.id]: label\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case LabelsActions.GET_LABELS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport interface MailsState\n{\n    entities?: { [id: number]: Mail };\n    currentMail: any;\n    selectedMailIds: string[];\n    searchText: string;\n    loading: boolean;\n    loaded: any;\n}\n\nexport const MailsInitialState: MailsState = {\n    entities       : {},\n    currentMail    : null,\n    selectedMailIds: [],\n    searchText     : '',\n    loading        : false,\n    loaded         : false\n};\n\nexport function MailsReducer(state = MailsInitialState, action: MailsActions.MailsActionsAll): MailsState\n{\n    switch ( action.type )\n    {\n        case MailsActions.GET_MAILS:\n        {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n\n        case MailsActions.GET_MAILS_SUCCESS:\n        {\n\n            const mails = action.payload.mails;\n            const loaded = action.payload.loaded;\n            const entities = mails.reduce(\n                (_entities: { [id: number]: Mail }, mail: Mail) => {\n                    return {\n                        ..._entities,\n                        [mail.id]: mail\n                    };\n                }, {});\n\n            return {\n                ...state,\n                entities,\n                loading: false,\n                loaded\n            };\n        }\n\n        case MailsActions.GET_MAILS_FAILED:\n        {\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        }\n\n        case MailsActions.SET_CURRENT_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                currentMail: action.payload\n            };\n        }\n\n        case MailsActions.UPDATE_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.id]: action.payload\n                }\n            };\n        }\n\n        case MailsActions.SET_SEARCH_TEXT:\n        {\n\n            return {\n                ...state,\n                searchText: action.payload\n            };\n        }\n\n        case MailsActions.TOGGLE_IN_SELECTED_MAILS:\n        {\n\n            const mailId = action.payload;\n\n            let selectedMailIds = [...state.selectedMailIds];\n\n            if ( selectedMailIds.find(id => id === mailId) !== undefined )\n            {\n                selectedMailIds = selectedMailIds.filter(id => id !== mailId);\n            }\n            else\n            {\n                selectedMailIds = [...selectedMailIds, mailId];\n            }\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SELECT_ALL_MAILS:\n        {\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n\n            const selectedMailIds = arr.map(mail => mail.id);\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.DESELECT_ALL_MAILS:\n        {\n            return {\n                ...state,\n                selectedMailIds: []\n            };\n        }\n\n        case MailsActions.SELECT_MAILS_BY_PARAMETER:\n        {\n            const filter = action.payload;\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n            const selectedMailIds = arr.filter(mail => mail[filter.parameter] === filter.value)\n                                       .map(mail => mail.id);\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SET_FOLDER_ON_SELECTED_MAILS:\n        {\n            const entities = {...state.entities};\n\n            state.selectedMailIds.map(id => {\n                entities[id] = {\n                    ...entities[id],\n                    folder: action.payload\n                };\n            });\n\n            return {\n                ...state,\n                entities\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { createSelector } from '@ngrx/store';\nimport { FiltersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFiltersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.filters\n);\n\nexport const getFilters = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.entities\n);\n\nexport const getFiltersLoaded = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.loaded\n);\n\nexport const getFiltersArr = createSelector(\n    getFilters,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","import { createSelector } from '@ngrx/store';\nimport { FoldersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFoldersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.folders\n);\n\nexport const getFolders = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.entities\n);\n\nexport const getFoldersLoaded = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.loaded\n);\n\nexport const getFoldersArr = createSelector(\n    getFolders,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","export * from './mails.selectors';\nexport * from './folders.selectors';\nexport * from './filters.selectors';\nexport * from './labels.selectors';\n","import { createSelector } from '@ngrx/store';\nimport { LabelsState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getLabelsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.labels\n);\n\nexport const getLabels = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.entities\n);\n\nexport const getLabelsLoaded = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.loaded\n);\n\nexport const getLabelsArr = createSelector(\n    getLabels,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","import { FuseUtils } from '@fuse/utils';\n\nimport { createSelector } from '@ngrx/store';\nimport { getMailAppState, MailAppState, MailsState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getMailsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.mails\n);\n\nexport const getMails = createSelector(\n    getMailsState,\n    (state: MailsState) => state.entities\n);\n\nexport const getMailsLoaded = createSelector(\n    getMailsState,\n    (state: MailsState) => state.loaded\n);\n\nexport const getSearchText = createSelector(\n    getMailsState,\n    (state: MailsState) => state.searchText\n);\n\nexport const getMailsArr = createSelector(\n    getMails,\n    getSearchText,\n    (entities, searchText) => {\n        const arr = Object.keys(entities).map((id) => entities[id]);\n        return FuseUtils.filterArrayByString(arr, searchText);\n    }\n);\n\nexport const getCurrentMail = createSelector(\n    getMailsState,\n    (state: MailsState) => state.currentMail\n);\n\nexport const getSelectedMailIds = createSelector(\n    getMailsState,\n    (state: MailsState) => state.selectedMailIds\n);\n","import { StoreModule } from '@ngrx/store';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { effects } from 'app/main/apps/mail-ngrx/store/effects';\n\n@NgModule({\n    imports  : [\n        StoreModule.forFeature('mail-app', reducers),\n        EffectsModule.forFeature(effects)\n    ],\n    providers: []\n})\nexport class MailNgrxStoreModule\n{\n}\n"]}