{"version":3,"sources":["webpack:///src/app/main/apps/chat/chat-start/chat-start.component.ts","webpack:///src/app/main/apps/chat/chat-start/chat-start.component.html","webpack:///src/app/main/apps/chat/chat-view/chat-view.component.ts","webpack:///src/app/main/apps/chat/chat-view/chat-view.component.html","webpack:///src/app/main/apps/chat/chat.component.ts","webpack:///src/app/main/apps/chat/chat.component.html","webpack:///src/app/main/apps/chat/chat.module.ts","webpack:///src/app/main/apps/chat/chat.service.ts","webpack:///src/app/main/apps/chat/sidenavs/left/chats/chats.component.ts","webpack:///src/app/main/apps/chat/sidenavs/left/chats/chats.component.html","webpack:///src/app/main/apps/chat/sidenavs/left/left.component.ts","webpack:///src/app/main/apps/chat/sidenavs/left/left.component.html","webpack:///src/app/main/apps/chat/sidenavs/left/user/user.component.ts","webpack:///src/app/main/apps/chat/sidenavs/left/user/user.component.html","webpack:///src/app/main/apps/chat/sidenavs/right/contact/contact.component.ts","webpack:///src/app/main/apps/chat/sidenavs/right/contact/contact.component.html","webpack:///src/app/main/apps/chat/sidenavs/right/right.component.ts","webpack:///src/app/main/apps/chat/sidenavs/right/right.component.html"],"names":["ChatStartComponent","selector","templateUrl","styleUrls","encapsulation","None","animations","ChatViewComponent","_chatService","_unsubscribeAll","user","onChatSelected","pipe","subscribe","chatData","selectedChat","contact","dialog","readyToReply","replyInput","replyInputField","first","nativeElement","next","complete","message","i","who","id","length","selectContact","setTimeout","focusReplyInput","scrollToBottom","focus","speed","directiveScroll","update","event","preventDefault","replyForm","form","value","time","Date","toISOString","push","reset","updateDialog","chatId","then","response","reply","ChatComponent","routes","path","component","children","resolve","chat","ChatModule","forChild","declarations","imports","providers","ChatService","_httpClient","onContactSelected","onChatsUpdated","onUserUpdated","onLeftSidenavViewChanged","onRightSidenavViewChanged","route","state","Promise","reject","all","getContacts","getChats","getUser","contacts","chats","contactId","chatItem","chatList","find","item","createNewChat","newChats","getChat","get","chatContact","generateGUID","chatListItem","lastMessageTime","name","unread","post","newUserData","updatedUser","status","userData","newData","updatedChat","ChatChatsSidenavComponent","_fuseMatSidenavHelperService","_mediaObserver","chatSearch","searchText","updatedChats","isActive","getSidenav","toggle","setUserStatus","view","console","log","changeLeftSidenavView","logout","ChatLeftSidenavComponent","ChatUserSidenavComponent","userForm","mood","valueChanges","data","updateUserData","ChatContactSidenavComponent","ChatRightSidenavComponent"],"mappings":"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","file":"chat-chat-module-es5.js","sourcesContent":["import { Component, ViewEncapsulation } from '@angular/core';\n\nimport { fuseAnimations } from '@fuse/animations';\n\n@Component({\n    selector     : 'chat-start',\n    templateUrl  : './chat-start.component.html',\n    styleUrls    : ['./chat-start.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ChatStartComponent\n{\n    constructor()\n    {\n    }\n}\n","<div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n    <div class=\"big-circle app-logo\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\n         [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n        <mat-icon class=\"s-64 s-md-128 mat-accent\">chat</mat-icon>\n    </div>\n\n    <span class=\"app-title mt-48 mb-8\" [@animate]=\"{value:'*',params:{delay:'100ms',y:'25px'}}\">\n        Chat App\n    </span>\n\n    <span fxHide fxShow.gt-md class=\"app-message\" [@animate]=\"{value:'*',params:{delay:'200ms',y:'50px'}}\">\n        Select a contact to start a chat!\n    </span>\n\n    <button mat-raised-button fxHide.gt-md fuseMatSidenavToggler=\"chat-left-sidenav\">\n        Select a contact to start a chat!\n    </button>\n\n</div>\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FusePerfectScrollbarDirective } from '@fuse/directives/fuse-perfect-scrollbar/fuse-perfect-scrollbar.directive';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-view',\n    templateUrl  : './chat-view.component.html',\n    styleUrls    : ['./chat-view.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ChatViewComponent implements OnInit, OnDestroy, AfterViewInit\n{\n    user: any;\n    chat: any;\n    dialog: any;\n    contact: any;\n    replyInput: any;\n    selectedChat: any;\n\n    @ViewChild(FusePerfectScrollbarDirective)\n    directiveScroll: FusePerfectScrollbarDirective;\n\n    @ViewChildren('replyInput')\n    replyInputField;\n\n    @ViewChild('replyForm')\n    replyForm: NgForm;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     */\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.user = this._chatService.user;\n        this._chatService.onChatSelected\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(chatData => {\n                if ( chatData )\n                {\n                    this.selectedChat = chatData;\n                    this.contact = chatData.contact;\n                    this.dialog = chatData.dialog;\n                    this.readyToReply();\n                }\n            });\n    }\n\n    /**\n     * After view init\n     */\n    ngAfterViewInit(): void\n    {\n        this.replyInput = this.replyInputField.first.nativeElement;\n        this.readyToReply();\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Decide whether to show or not the contact's avatar in the message row\n     *\n     * @param message\n     * @param i\n     * @returns {boolean}\n     */\n    shouldShowContactAvatar(message, i): boolean\n    {\n        return (\n            message.who === this.contact.id &&\n            ((this.dialog[i + 1] && this.dialog[i + 1].who !== this.contact.id) || !this.dialog[i + 1])\n        );\n    }\n\n    /**\n     * Check if the given message is the first message of a group\n     *\n     * @param message\n     * @param i\n     * @returns {boolean}\n     */\n    isFirstMessageOfGroup(message, i): boolean\n    {\n        return (i === 0 || this.dialog[i - 1] && this.dialog[i - 1].who !== message.who);\n    }\n\n    /**\n     * Check if the given message is the last message of a group\n     *\n     * @param message\n     * @param i\n     * @returns {boolean}\n     */\n    isLastMessageOfGroup(message, i): boolean\n    {\n        return (i === this.dialog.length - 1 || this.dialog[i + 1] && this.dialog[i + 1].who !== message.who);\n    }\n\n    /**\n     * Select contact\n     */\n    selectContact(): void\n    {\n        this._chatService.selectContact(this.contact);\n    }\n\n    /**\n     * Ready to reply\n     */\n    readyToReply(): void\n    {\n        setTimeout(() => {\n            this.focusReplyInput();\n            this.scrollToBottom();\n        });\n    }\n\n    /**\n     * Focus to the reply input\n     */\n    focusReplyInput(): void\n    {\n        setTimeout(() => {\n            this.replyInput.focus();\n        });\n    }\n\n    /**\n     * Scroll to the bottom\n     *\n     * @param {number} speed\n     */\n    scrollToBottom(speed?: number): void\n    {\n        speed = speed || 400;\n        if ( this.directiveScroll )\n        {\n            this.directiveScroll.update();\n\n            setTimeout(() => {\n                this.directiveScroll.scrollToBottom(0, speed);\n            });\n        }\n    }\n\n    /**\n     * Reply\n     */\n    reply(event): void\n    {\n        event.preventDefault();\n\n        if ( !this.replyForm.form.value.message )\n        {\n            return;\n        }\n\n        // Message\n        const message = {\n            who    : this.user.id,\n            message: this.replyForm.form.value.message,\n            time   : new Date().toISOString()\n        };\n\n        // Add the message to the chat\n        this.dialog.push(message);\n\n        // Reset the reply form\n        this.replyForm.reset();\n\n        // Update the server\n        this._chatService.updateDialog(this.selectedChat.chatId, this.dialog).then(response => {\n            this.readyToReply();\n        });\n    }\n}\n","<!-- CHAT -->\n<div class=\"chat\" fxFlex fxLayout=\"column\">\n\n    <!-- CHAT TOOLBAR -->\n    <mat-toolbar class=\"chat-toolbar\">\n\n        <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <!-- RESPONSIVE CHATS BUTTON-->\n                <button mat-icon-button fxHide.gt-md class=\"responsive-chats-button mr-16\"\n                        fuseMatSidenavToggler=\"chat-left-sidenav\"\n                        aria-label=\"chats button\">\n                    <mat-icon>chat</mat-icon>\n                </button>\n                <!-- / RESPONSIVE CHATS BUTTON-->\n\n                <!-- CHAT CONTACT-->\n                <div class=\"chat-contact\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                     fuseMatSidenavToggler=\"chat-right-sidenav\" (click)=\"selectContact()\">\n\n                    <div class=\"avatar-wrapper\">\n\n                        <img [src]=\"contact.avatar\"\n                             class=\"avatar\"\n                             alt=\"{{contact.name}}\"/>\n\n                        <mat-icon class=\"s-16 status\"\n                                  [ngClass]=\"contact.status\">\n                        </mat-icon>\n                    </div>\n\n                    <div class=\"chat-contact-name\">\n                        {{contact.name}}\n                    </div>\n\n                </div>\n                <!-- / CHAT CONTACT-->\n            </div>\n\n            <div>\n                <button mat-icon-button [matMenuTriggerFor]=\"contactMenu\" aria-label=\"more\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n\n                <mat-menu #contactMenu=\"matMenu\">\n                    <button mat-menu-item fuseMatSidenavToggler=\"chat-right-sidenav\" (click)=\"selectContact()\">\n                        Contact Info\n                    </button>\n                </mat-menu>\n            </div>\n\n        </div>\n    </mat-toolbar>\n    <!-- / CHAT TOOLBAR -->\n\n    <!-- CHAT CONTENT -->\n    <div id=\"chat-content\" fxFlex=\"1 1 auto\"  fusePerfectScrollbar>\n\n        <!-- CHAT MESSAGES -->\n        <div class=\"chat-messages\">\n\n            <!-- MESSAGE -->\n            <div *ngFor=\"let message of dialog; let i = index\" class=\"message-row\"\n                 [ngClass]=\"{\n                            'me': message.who === user.id,\n                            'contact': message.who !== user.id,\n                            'first-of-group': isFirstMessageOfGroup(message, i),\n                            'last-of-group': isLastMessageOfGroup(message, i)\n                            }\">\n\n                <img *ngIf=\"shouldShowContactAvatar(message, i)\"\n                     src=\"{{contact.avatar}}\"\n                     class=\"avatar\">\n\n                <div class=\"bubble\">\n                    <div class=\"message\">{{message.message}}</div>\n                    <div class=\"time secondary-text\">{{message.time | date:'short'}}</div>\n                </div>\n\n            </div>\n            <!-- / MESSAGE -->\n\n        </div>\n        <!-- CHAT MESSAGES -->\n\n    </div>\n    <!-- / CHAT CONTENT -->\n\n    <!-- CHAT FOOTER -->\n    <div class=\"chat-footer\" fxFlex=\"0 0 auto\" fxLayout=\"column\">\n\n        <!-- REPLY FORM -->\n        <div class=\"reply-form\" fxFlex=\"0 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n\n            <form #replyForm=\"ngForm\"\n                  (ngSubmit)=\"reply($event)\"\n                  (keydown.enter)=\"reply($event)\"\n                  fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <mat-form-field class=\"message-text\" fxFlex floatLabel=\"never\" appearance=\"standard\">\n                    <textarea matInput #replyInput placeholder=\"Type your message\"\n                              ngModel name=\"message\" [rows]=\"1\" [matTextareaAutosize]=\"true\"></textarea>\n                </mat-form-field>\n\n                <button class=\"send-message-button\" mat-icon-button type=\"submit\" aria-label=\"Send message\">\n                    <mat-icon class=\"secondary-text\">send</mat-icon>\n                </button>\n\n            </form>\n\n        </div>\n        <!-- / REPLY FORM -->\n\n    </div>\n    <!-- / CHAT FOOTER-->\n\n</div>\n<!-- / CHAT -->\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat',\n    templateUrl  : './chat.component.html',\n    styleUrls    : ['./chat.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ChatComponent implements OnInit, OnDestroy\n{\n    selectedChat: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     */\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._chatService.onChatSelected\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(chatData => {\n                this.selectedChat = chatData;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n}\n","<div id=\"chat\" class=\"page-layout carded fullwidth inner-scroll\">\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card\">\n\n            <mat-sidenav-container>\n\n                <!-- LEFT SIDENAV -->\n                <mat-sidenav class=\"sidenav\" position=\"start\" opened=\"true\" mode=\"side\"\n                             fuseMatSidenavHelper=\"chat-left-sidenav\" matIsLockedOpen=\"gt-md\">\n                    <chat-left-sidenav></chat-left-sidenav>\n                </mat-sidenav>\n                <!-- / LEFT SIDENAV -->\n\n                <!-- CONTENT -->\n                <chat-start *ngIf=\"!selectedChat\"></chat-start>\n\n                <chat-view *ngIf=\"selectedChat\"></chat-view>\n                <!-- / CONTENT -->\n\n                <!-- RIGHT SIDENAV -->\n                <mat-sidenav class=\"sidenav\" position=\"end\" opened=\"false\" mode=\"over\"\n                             fuseMatSidenavHelper=\"chat-right-sidenav\">\n                    <chat-right-sidenav></chat-right-sidenav>\n                </mat-sidenav>\n                <!-- / RIGHT SIDENAV -->\n\n            </mat-sidenav-container>\n\n        </div>\n        <!-- / CONTENT CARD -->\n\n    </div>\n    <!-- / CENTER -->\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\nimport { ChatComponent } from 'app/main/apps/chat/chat.component';\nimport { ChatStartComponent } from 'app/main/apps/chat/chat-start/chat-start.component';\nimport { ChatViewComponent } from 'app/main/apps/chat/chat-view/chat-view.component';\nimport { ChatChatsSidenavComponent } from 'app/main/apps/chat/sidenavs/left/chats/chats.component';\nimport { ChatUserSidenavComponent } from 'app/main/apps/chat/sidenavs/left/user/user.component';\nimport { ChatLeftSidenavComponent } from 'app/main/apps/chat/sidenavs/left/left.component';\nimport { ChatRightSidenavComponent } from 'app/main/apps/chat/sidenavs/right/right.component';\nimport { ChatContactSidenavComponent } from 'app/main/apps/chat/sidenavs/right/contact/contact.component';\n\nconst routes: Routes = [\n    {\n        path: '**',\n        component: ChatComponent,\n        children: [],\n        resolve: {\n            chat: ChatService\n        }\n    }\n];\n\n@NgModule({\n    declarations: [\n        ChatComponent,\n        ChatViewComponent,\n        ChatStartComponent,\n        ChatChatsSidenavComponent,\n        ChatUserSidenavComponent,\n        ChatLeftSidenavComponent,\n        ChatRightSidenavComponent,\n        ChatContactSidenavComponent\n    ],\n    imports     : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatListModule,\n        MatMenuModule,\n        MatRadioModule,\n        MatSidenavModule,\n        MatToolbarModule,\n\n        FuseSharedModule\n    ],\n    providers   : [\n        ChatService\n    ]\n})\nexport class ChatModule\n{\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\nimport { FuseUtils } from '@fuse/utils';\n\n@Injectable()\nexport class ChatService implements Resolve<any>\n{\n    contacts: any[];\n    chats: any[];\n    user: any;\n    onChatSelected: BehaviorSubject<any>;\n    onContactSelected: BehaviorSubject<any>;\n    onChatsUpdated: Subject<any>;\n    onUserUpdated: Subject<any>;\n    onLeftSidenavViewChanged: Subject<any>;\n    onRightSidenavViewChanged: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     */\n    constructor(\n        private _httpClient: HttpClient\n    )\n    {\n        // Set the defaults\n        this.onChatSelected = new BehaviorSubject(null);\n        this.onContactSelected = new BehaviorSubject(null);\n        this.onChatsUpdated = new Subject();\n        this.onUserUpdated = new Subject();\n        this.onLeftSidenavViewChanged = new Subject();\n        this.onRightSidenavViewChanged = new Subject();\n    }\n\n    /**\n     * Resolver\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<any> | Promise<any> | any}\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any\n    {\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                this.getContacts(),\n                this.getChats(),\n                this.getUser()\n            ]).then(\n                ([contacts, chats, user]) => {\n                    this.contacts = contacts;\n                    this.chats = chats;\n                    this.user = user;\n                    resolve();\n                },\n                reject\n            );\n        });\n    }\n\n    /**\n     * Get chat\n     *\n     * @param contactId\n     * @returns {Promise<any>}\n     */\n    getChat(contactId): Promise<any>\n    {\n        const chatItem = this.user.chatList.find((item) => {\n            return item.contactId === contactId;\n        });\n\n        // Create new chat, if it's not created yet.\n        if ( !chatItem )\n        {\n            this.createNewChat(contactId).then((newChats) => {\n                this.getChat(contactId);\n            });\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/chat-chats/' + chatItem.id)\n                .subscribe((response: any) => {\n                    const chat = response;\n\n                    const chatContact = this.contacts.find((contact) => {\n                        return contact.id === contactId;\n                    });\n\n                    const chatData = {\n                        chatId : chat.id,\n                        dialog : chat.dialog,\n                        contact: chatContact\n                    };\n\n                    this.onChatSelected.next({...chatData});\n\n                }, reject);\n\n        });\n\n    }\n\n    /**\n     * Create new chat\n     *\n     * @param contactId\n     * @returns {Promise<any>}\n     */\n    createNewChat(contactId): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n\n            const contact = this.contacts.find((item) => {\n                return item.id === contactId;\n            });\n\n            const chatId = FuseUtils.generateGUID();\n\n            const chat = {\n                id    : chatId,\n                dialog: []\n            };\n\n            const chatListItem = {\n                contactId      : contactId,\n                id             : chatId,\n                lastMessageTime: '2017-02-18T10:30:18.931Z',\n                name           : contact.name,\n                unread         : null\n            };\n\n            // Add new chat list item to the user's chat list\n            this.user.chatList.push(chatListItem);\n\n            // Post the created chat\n            this._httpClient.post('api/chat-chats', {...chat})\n                .subscribe((response: any) => {\n\n                    // Post the new the user data\n                    this._httpClient.post('api/chat-user/' + this.user.id, this.user)\n                        .subscribe(newUserData => {\n\n                            // Update the user data from server\n                            this.getUser().then(updatedUser => {\n                                this.onUserUpdated.next(updatedUser);\n                                resolve(updatedUser);\n                            });\n                        });\n                }, reject);\n        });\n    }\n\n    /**\n     * Select contact\n     *\n     * @param contact\n     */\n    selectContact(contact): void\n    {\n        this.onContactSelected.next(contact);\n    }\n\n    /**\n     * Set user status\n     *\n     * @param status\n     */\n    setUserStatus(status): void\n    {\n        this.user.status = status;\n    }\n\n    /**\n     * Update user data\n     *\n     * @param userData\n     */\n    updateUserData(userData): void\n    {\n        this._httpClient.post('api/chat-user/' + this.user.id, userData)\n            .subscribe((response: any) => {\n                    this.user = userData;\n                }\n            );\n    }\n\n    /**\n     * Update the chat dialog\n     *\n     * @param chatId\n     * @param dialog\n     * @returns {Promise<any>}\n     */\n    updateDialog(chatId, dialog): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n\n            const newData = {\n                id    : chatId,\n                dialog: dialog\n            };\n\n            this._httpClient.post('api/chat-chats/' + chatId, newData)\n                .subscribe(updatedChat => {\n                    resolve(updatedChat);\n                }, reject);\n        });\n    }\n\n    /**\n     * Get contacts\n     *\n     * @returns {Promise<any>}\n     */\n    getContacts(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/chat-contacts')\n                .subscribe((response: any) => {\n                    resolve(response);\n                }, reject);\n        });\n    }\n\n    /**\n     * Get chats\n     *\n     * @returns {Promise<any>}\n     */\n    getChats(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/chat-chats')\n                .subscribe((response: any) => {\n                    resolve(response);\n                }, reject);\n        });\n    }\n\n    /**\n     * Get user\n     *\n     * @returns {Promise<any>}\n     */\n    getUser(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/chat-user')\n                .subscribe((response: any) => {\n                    resolve(response[0]);\n                }, reject);\n        });\n    }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseMatSidenavHelperService } from '@fuse/directives/fuse-mat-sidenav/fuse-mat-sidenav.service';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-chats-sidenav',\n    templateUrl  : './chats.component.html',\n    styleUrls    : ['./chats.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ChatChatsSidenavComponent implements OnInit, OnDestroy\n{\n    chats: any[];\n    chatSearch: any;\n    contacts: any[];\n    searchText: string;\n    user: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     * @param {FuseMatSidenavHelperService} _fuseMatSidenavHelperService\n     * @param {MediaObserver} _mediaObserver\n     */\n    constructor(\n        private _chatService: ChatService,\n        private _fuseMatSidenavHelperService: FuseMatSidenavHelperService,\n        public _mediaObserver: MediaObserver\n    )\n    {\n        // Set the defaults\n        this.chatSearch = {\n            name: ''\n        };\n        this.searchText = '';\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.user = this._chatService.user;\n        this.chats = this._chatService.chats;\n        this.contacts = this._chatService.contacts;\n\n        this._chatService.onChatsUpdated\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(updatedChats => {\n                this.chats = updatedChats;\n            });\n\n        this._chatService.onUserUpdated\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(updatedUser => {\n                this.user = updatedUser;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get chat\n     *\n     * @param contact\n     */\n    getChat(contact): void\n    {\n        this._chatService.getChat(contact);\n\n        if ( !this._mediaObserver.isActive('gt-md') )\n        {\n            this._fuseMatSidenavHelperService.getSidenav('chat-left-sidenav').toggle();\n        }\n    }\n\n    /**\n     * Set user status\n     *\n     * @param status\n     */\n    setUserStatus(status): void\n    {\n        this._chatService.setUserStatus(status);\n    }\n\n    /**\n     * Change left sidenav view\n     *\n     * @param view\n     */\n    changeLeftSidenavView(view): void\n    {\n        this._chatService.onLeftSidenavViewChanged.next(view);\n    }\n\n    /**\n     * Logout\n     */\n    logout(): void\n    {\n        console.log('logout triggered');\n    }\n}\n","<!-- SIDENAV HEADER -->\n<div class=\"sidenav-header\">\n    <!-- CHATS TOOLBAR -->\n    <mat-toolbar>\n\n        <!-- TOOLBAR TOP -->\n        <mat-toolbar-row fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <!-- USER AVATAR WRAPPER -->\n            <div class=\"avatar-wrapper\">\n\n                <!-- USER AVATAR -->\n                <img (click)=\"changeLeftSidenavView('user')\"\n                     src=\"{{user.avatar}}\"\n                     class=\"mat-avatar avatar\"\n                     alt=\"{{user.name}}\"/>\n                <!-- / USER AVATAR -->\n\n                <mat-icon class=\"s-16 status\" [ngClass]=\"user.status\"\n                          [matMenuTriggerFor]=\"userStatusMenu\"></mat-icon>\n\n                <!-- USER STATUS -->\n                <mat-menu id=\"user-status-menu\" #userStatusMenu=\"matMenu\">\n\n                    <button mat-menu-item (click)=\"setUserStatus('online')\">\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <mat-icon class=\"s-16 status online\"></mat-icon>\n                            <span>Online</span>\n                        </div>\n                    </button>\n\n                    <button mat-menu-item (click)=\"setUserStatus('away')\">\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <mat-icon class=\"s-16 status away\"></mat-icon>\n                            <span>Away</span>\n                        </div>\n                    </button>\n\n                    <button mat-menu-item (click)=\"setUserStatus('do-not-disturb')\">\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <mat-icon class=\"s-16 status do-not-disturb\"></mat-icon>\n                            <span>Do not disturb</span>\n                        </div>\n                    </button>\n\n                    <button mat-menu-item (click)=\"setUserStatus('offline')\">\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <mat-icon class=\"s-16 status offline\"></mat-icon>\n                            <span>Offline</span>\n                        </div>\n                    </button>\n                </mat-menu>\n                <!-- / USER STATUS -->\n\n            </div>\n            <!-- / USER AVATAR -->\n\n            <div>\n                <button mat-icon-button\n                        [matMenuTriggerFor]=\"userMenu\"\n                        aria-label=\"more\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                <mat-menu #userMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"changeLeftSidenavView('user')\">\n                        Profile\n                    </button>\n                    <button mat-menu-item (click)=\"logout()\">\n                        Logout\n                    </button>\n                </mat-menu>\n            </div>\n\n        </mat-toolbar-row>\n        <!-- / TOOLBAR TOP -->\n\n        <!-- TOOLBAR BOTTOM -->\n        <mat-toolbar-row>\n\n            <!-- SEARCH -->\n            <div class=\"search-wrapper\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <div class=\"search\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"s-16 secondary-text\">search</mat-icon>\n                    <input [(ngModel)]=\"searchText\" type=\"text\" placeholder=\"Search or start new chat\" fxFlex>\n                </div>\n\n            </div>\n            <!-- / SEARCH -->\n\n        </mat-toolbar-row>\n        <!-- / TOOLBAR BOTTOM -->\n\n    </mat-toolbar>\n    <!-- / CHATS TOOLBAR -->\n\n</div>\n<!-- / SIDENAV HEADER -->\n\n<!-- SIDENAV CONTENT -->\n<div class=\"sidenav-content\" fusePerfectScrollbar fxFlex>\n\n    <!-- CHATS CONTENT -->\n    <div *fuseIfOnDom [@animateStagger]=\"{value:'50'}\">\n\n        <!-- CHATS LIST-->\n        <div class=\"chat-list\" fxLayout=\"column\">\n\n            <div matSubheader *ngIf=\"(user.chatList | filter: searchText).length > 0\">\n                Chats\n            </div>\n\n            <button mat-button class=\"contact\"\n                    *ngFor=\"let chat of user.chatList | filter: searchText\"\n                    (click)=\"getChat(chat.contactId)\" ngClass=\"{'unread':contact.unread}\"\n                    [@animate]=\"{value:'*',params:{y:'100%'}}\">\n\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                    <div class=\"avatar-wrapper\" fxFlex=\"0 1 auto\" fxLayoutAlign=\"center center\">\n                        <img class=\"avatar\" [src]=\"contacts | getById:chat.contactId:'avatar'\"\n                             alt=\"{{contacts | getById:chat.contactId:'name'}}\"/>\n                        <mat-icon class=\"s-16 status\" [ngClass]=\"contacts | getById:chat.contactId:'status'\"></mat-icon>\n                    </div>\n\n                    <div fxLayout=\"row\" fxFlex>\n\n                        <div class=\"pr-4\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center start\">\n                            <div class=\"contact-name\">{{contacts | getById:chat.contactId:'name'}}</div>\n                            <div class=\"contact-last-message\">{{chat.lastMessage}}</div>\n                        </div>\n\n                        <div fxLayout=\"column\" fxLayoutAlign=\"start end\">\n                            <div class=\"contact-last-message-time\">\n                                {{chat.lastMessageTime | date}}\n                            </div>\n                            <div *ngIf=\"chat.unread\" class=\"mt-4 unread-message-count accent\">{{chat.unread}}</div>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </button>\n\n        </div>\n        <!-- / CHATS LIST-->\n\n        <!-- CONTACTS LIST-->\n        <div class=\"contact-list\" fxLayout=\"column\">\n\n            <div matSubheader *ngIf=\"(contacts | filter: searchText).length > 0\">\n                Contacts\n            </div>\n\n            <button mat-button class=\"contact\"\n                    *ngFor=\"let contact of contacts| filter: searchText\"\n                    (click)=\"getChat(contact.id)\"\n                    [@animate]=\"{value:'*',params:{y:'100%'}}\">\n\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                    <div class=\"avatar-wrapper\" fxFlex=\"0 1 auto\">\n                        <img src=\"{{contact.avatar}}\" class=\"mat-avatar avatar\" alt=\"{{contact.name}}\"/>\n                        <mat-icon class=\"s-16 status\" [ngClass]=\"contact.status\"></mat-icon>\n                    </div>\n\n                    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n                        <div class=\"contact-name\">{{contact.name}}</div>\n                        <p class=\"contact-mood\">{{contact.mood}}</p>\n                    </div>\n\n                </div>\n\n            </button>\n\n        </div>\n        <!-- / CONTACTS LIST-->\n\n        <!-- NO RESULTS MESSAGE -->\n        <div *ngIf=\"(contacts | filter: searchText).length === 0\" class=\"no-results-message\">\n            No results..\n        </div>\n        <!-- NO RESULTS MESSAGE-->\n\n    </div>\n    <!-- / CHATS CONTENT -->\n\n</div>\n<!-- / SIDENAV CONTENT -->\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-left-sidenav',\n    templateUrl  : './left.component.html',\n    styleUrls    : ['./left.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ChatLeftSidenavComponent implements OnInit, OnDestroy\n{\n    view: string;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     */\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the defaults\n        this.view = 'chats';\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._chatService.onLeftSidenavViewChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(view => {\n                this.view = view;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n}\n","<div [ngSwitch]=\"view\" class=\"views\">\n    <chat-chats-sidenav class=\"view\"\n                        *ngSwitchCase=\"'chats'\"\n                        [@slideInRight]>\n    </chat-chats-sidenav>\n\n    <chat-user-sidenav class=\"view\"\n                       *ngSwitchCase=\"'user'\"\n                       [@slideInLeft]\n                       fusePerfectScrollbar>\n    </chat-user-sidenav>\n</div>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-user-sidenav',\n    templateUrl  : './user.component.html',\n    styleUrls    : ['./user.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ChatUserSidenavComponent implements OnInit, OnDestroy\n{\n    user: any;\n    userForm: FormGroup;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     */\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.user = this._chatService.user;\n\n        this.userForm = new FormGroup({\n            mood  : new FormControl(this.user.mood),\n            status: new FormControl(this.user.status)\n        });\n\n        this.userForm.valueChanges\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                debounceTime(500),\n                distinctUntilChanged()\n            )\n            .subscribe(data => {\n                this.user.mood = data.mood;\n                this.user.status = data.status;\n                this._chatService.updateUserData(this.user);\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Change left sidenav view\n     *\n     * @param view\n     */\n    changeLeftSidenavView(view): void\n    {\n        this._chatService.onLeftSidenavViewChanged.next(view);\n    }\n\n}\n","<!-- SIDENAV HEADER -->\n<div class=\"sidenav-header\">\n\n    <!-- USER TOOLBAR -->\n    <mat-toolbar class=\"accent\">\n\n        <!-- TOOLBAR TOP -->\n        <mat-toolbar-row fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <button mat-icon-button (click)=\"changeLeftSidenavView('chats')\" aria-label=\"back\">\n                <mat-icon>arrow_back</mat-icon>\n            </button>\n\n        </mat-toolbar-row>\n        <!-- / TOOLBAR TOP -->\n\n        <!-- TOOLBAR BOTTOM -->\n        <mat-toolbar-row class=\"toolbar-bottom\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n            <img [src]=\"user.avatar\" class=\"avatar user-avatar huge\" alt=\"{{user.name}}\"/>\n            <div class=\"user-name my-8\">{{user.name}}</div>\n\n        </mat-toolbar-row>\n        <!-- / TOOLBAR BOTTOM -->\n\n    </mat-toolbar>\n    <!-- / USER TOOLBAR -->\n</div>\n\n<!-- SIDENAV CONTENT -->\n<div class=\"sidenav-content py-32 px-24\" fxFlex>\n\n    <!-- USER MOOD -->\n    <form [formGroup]=\"userForm\" fxLayout=\"column\">\n\n        <mat-form-field appearance=\"outline\" fxFlex=\"0 1 auto\">\n            <mat-label>Mood</mat-label>\n            <textarea matInput name=\"mood\" formControlName=\"mood\" rows=\"3\"></textarea>\n        </mat-form-field>\n\n        <mat-radio-group formControlName=\"status\" fxLayout=\"column\">\n\n            <mat-radio-button value=\"online\" class=\"py-8\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"status online mr-8\"></mat-icon>\n                    <span class=\"mat-h4 m-0\">Online</span>\n                </div>\n            </mat-radio-button>\n\n            <mat-radio-button value=\"away\" class=\"py-8\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"status away mr-8\"></mat-icon>\n                    <span class=\"mat-h4 m-0\">Away</span>\n                </div>\n            </mat-radio-button>\n\n            <mat-radio-button value=\"do-not-disturb\" class=\"py-8\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"status do-not-disturb mr-8\"></mat-icon>\n                    <span class=\"mat-h4 m-0\">Do not disturb</span>\n                </div>\n            </mat-radio-button>\n\n            <mat-radio-button value=\"offline\" class=\"py-8\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"status offline mr-8\"></mat-icon>\n                    <span class=\"mat-h4 m-0\">Offline</span>\n                </div>\n            </mat-radio-button>\n        </mat-radio-group>\n\n    </form>\n    <!-- / USER MOOD -->\n\n</div>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-contact-sidenav',\n    templateUrl  : './contact.component.html',\n    styleUrls    : ['./contact.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ChatContactSidenavComponent implements OnInit, OnDestroy\n{\n    contact: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChatService} _chatService\n     */\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._chatService.onContactSelected\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(contact => {\n                this.contact = contact;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n}\n","<!-- SIDENAV HEADER -->\n<div class=\"sidenav-header\" *ngIf=\"contact\">\n\n    <!-- CONTACT TOOLBAR -->\n    <mat-toolbar class=\"accent\">\n\n        <!-- TOOLBAR TOP -->\n        <mat-toolbar-row fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <div>Contact Info</div>\n\n            <button mat-icon-button fuseMatSidenavToggler=\"chat-right-sidenav\" aria-label=\"close\">\n                <mat-icon>close</mat-icon>\n            </button>\n\n        </mat-toolbar-row>\n        <!-- / TOOLBAR TOP -->\n\n        <!-- TOOLBAR BOTTOM -->\n        <mat-toolbar-row class=\"toolbar-bottom\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <img [src]=\"contact.avatar\" class=\"avatar contact-avatar huge\" alt=\"{{contact.name}}\"/>\n            <div class=\"contact-name my-8\">{{contact.name}}</div>\n        </mat-toolbar-row>\n        <!-- / TOOLBAR BOTTOM -->\n\n    </mat-toolbar>\n    <!-- / CONTACT TOOLBAR -->\n</div>\n\n<!-- SIDENAV CONTENT -->\n<div class=\"sidenav-content py-32 px-24\" fxFlex fxLayout=\"column\" *ngIf=\"contact\">\n\n    <!-- CONTACT MOOD -->\n    <div class=\"secondary-text mb-8\">Mood</div>\n    <div>{{contact.mood}}</div>\n    <!-- / CONTACT MOOD -->\n\n</div>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\n\nimport { ChatService } from 'app/main/apps/chat/chat.service';\n\n@Component({\n    selector     : 'chat-right-sidenav',\n    templateUrl  : './right.component.html',\n    styleUrls    : ['./right.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ChatRightSidenavComponent implements OnInit, OnDestroy\n{\n    view: string;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(\n        private _chatService: ChatService\n    )\n    {\n        // Set the defaults\n        this.view = 'contact';\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._chatService.onRightSidenavViewChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(view => {\n                this.view = view;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n}\n","<div [ngSwitch]=\"view\" class=\"views\">\n\n    <chat-contact-sidenav class=\"view\"\n                          *ngSwitchCase=\"'contact'\"\n                          [@slideInRight]\n                          fusePerfectScrollbar>\n    </chat-contact-sidenav>\n\n</div>\n"]}